{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from 'axios';\nimport TaskForm from './components/TaskForm.vue';\nimport TaskList from './components/TaskList.vue';\nexport default {\n  name: 'App',\n  components: {\n    TaskForm,\n    TaskList\n  },\n  data() {\n    return {\n      tasks: [],\n      filter: 'all'\n    };\n  },\n  computed: {\n    filteredTasks() {\n      switch (this.filter) {\n        case 'active':\n          return this.tasks.filter(task => !task.completed);\n        case 'completed':\n          return this.tasks.filter(task => task.completed);\n        default:\n          return this.tasks;\n      }\n    }\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await axios.get('http://localhost:3000/api/tasks');\n        this.tasks = response.data;\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    },\n    async addTask(task) {\n      try {\n        const response = await axios.post('http://localhost:3000/api/tasks', task);\n        this.tasks.push(response.data);\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    },\n    async updateTask(task) {\n      try {\n        await axios.put(`http://localhost:3000/api/tasks/${task.id}`, task);\n        // Bug 3: Updated task is not reflected in the UI\n      } catch (error) {\n        console.error('Error updating task:', error);\n      }\n    },\n    async deleteTask(taskId) {\n      try {\n        await axios.delete(`http://localhost:3000/api/tasks/${taskId}`);\n        this.tasks = this.tasks.filter(task => task.id !== taskId);\n      } catch (error) {\n        console.error('Error deleting task:', error);\n      }\n    },\n    filterTasks(filter) {\n      this.filter = filter;\n    }\n  },\n  mounted() {\n    this.fetchTasks();\n    // Bug 4: Fetching completed tasks separately, but not using the data\n    axios.get('http://localhost:3000/api/tasks/completed').then(response => {\n      console.log('Completed tasks:', response.data);\n    }).catch(error => {\n      console.error('Error fetching completed tasks:', error);\n    });\n  }\n};","map":{"version":3,"names":["axios","TaskForm","TaskList","name","components","data","tasks","filter","computed","filteredTasks","task","completed","methods","fetchTasks","response","get","error","console","addTask","post","push","updateTask","put","id","deleteTask","taskId","delete","filterTasks","mounted","then","log","catch"],"sources":["C:\\Users\\user\\Downloads\\qa-ex\\frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Simple Task Manager</h1>\n    <task-form @add-task=\"addTask\"></task-form>\n    <div class=\"filters\">\n      <button @click=\"filterTasks('all')\" :class=\"{ active: filter === 'all' }\">All</button>\n      <button @click=\"filterTasks('active')\" :class=\"{ active: filter === 'active' }\">Active</button>\n      <button @click=\"filterTasks('completed')\" :class=\"{ active: filter === 'completed' }\">Completed</button>\n    </div>\n    <task-list :tasks=\"filteredTasks\" @update-task=\"updateTask\" @delete-task=\"deleteTask\"></task-list>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport TaskForm from './components/TaskForm.vue';\nimport TaskList from './components/TaskList.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    TaskForm,\n    TaskList,\n  },\n  data() {\n    return {\n      tasks: [],\n      filter: 'all',\n    };\n  },\n  computed: {\n    filteredTasks() {\n      switch (this.filter) {\n        case 'active':\n          return this.tasks.filter(task => !task.completed);\n        case 'completed':\n          return this.tasks.filter(task => task.completed);\n        default:\n          return this.tasks;\n      }\n    },\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await axios.get('http://localhost:3000/api/tasks');\n        this.tasks = response.data;\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    },\n    async addTask(task) {\n      try {\n        const response = await axios.post('http://localhost:3000/api/tasks', task);\n        this.tasks.push(response.data);\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    },\n    async updateTask(task) {\n      try {\n        await axios.put(`http://localhost:3000/api/tasks/${task.id}`, task);\n        // Bug 3: Updated task is not reflected in the UI\n      } catch (error) {\n        console.error('Error updating task:', error);\n      }\n    },\n    async deleteTask(taskId) {\n      try {\n        await axios.delete(`http://localhost:3000/api/tasks/${taskId}`);\n        this.tasks = this.tasks.filter(task => task.id !== taskId);\n      } catch (error) {\n        console.error('Error deleting task:', error);\n      }\n    },\n    filterTasks(filter) {\n      this.filter = filter;\n    },\n  },\n  mounted() {\n    this.fetchTasks();\n    // Bug 4: Fetching completed tasks separately, but not using the data\n    axios.get('http://localhost:3000/api/tasks/completed')\n      .then(response => {\n        console.log('Completed tasks:', response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching completed tasks:', error);\n      });\n  },\n};\n</script>\n\n<style scoped>\n#app {\n  font-family: Arial, sans-serif;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  color: #2c3e50;\n  text-align: center;\n}\n\n.filters {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.filters button {\n  margin: 0 10px;\n  padding: 5px 10px;\n  border: none;\n  background-color: #ecf0f1;\n  color: #34495e;\n  cursor: pointer;\n  border-radius: 3px;\n}\n\n.filters button.active {\n  background-color: #3498db;\n  color: white;\n}\n</style>"],"mappings":";;;AAcA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,2BAA2B;AAChD,OAAOC,QAAO,MAAO,2BAA2B;AAEhD,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVH,QAAQ;IACRC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,QAAQ,IAAI,CAACF,MAAM;QACjB,KAAK,QAAQ;UACX,OAAO,IAAI,CAACD,KAAK,CAACC,MAAM,CAACG,IAAG,IAAK,CAACA,IAAI,CAACC,SAAS,CAAC;QACnD,KAAK,WAAW;UACd,OAAO,IAAI,CAACL,KAAK,CAACC,MAAM,CAACG,IAAG,IAAKA,IAAI,CAACC,SAAS,CAAC;QAClD;UACE,OAAO,IAAI,CAACL,KAAK;MACrB;IACF;EACF,CAAC;EACDM,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,iCAAiC,CAAC;QACnE,IAAI,CAACT,KAAI,GAAIQ,QAAQ,CAACT,IAAI;MAC5B,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACD,MAAME,OAAOA,CAACR,IAAI,EAAE;MAClB,IAAI;QACF,MAAMI,QAAO,GAAI,MAAMd,KAAK,CAACmB,IAAI,CAAC,iCAAiC,EAAET,IAAI,CAAC;QAC1E,IAAI,CAACJ,KAAK,CAACc,IAAI,CAACN,QAAQ,CAACT,IAAI,CAAC;MAChC,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IACD,MAAMK,UAAUA,CAACX,IAAI,EAAE;MACrB,IAAI;QACF,MAAMV,KAAK,CAACsB,GAAG,CAAC,mCAAmCZ,IAAI,CAACa,EAAE,EAAE,EAAEb,IAAI,CAAC;QACnE;MACF,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAMQ,UAAUA,CAACC,MAAM,EAAE;MACvB,IAAI;QACF,MAAMzB,KAAK,CAAC0B,MAAM,CAAC,mCAAmCD,MAAM,EAAE,CAAC;QAC/D,IAAI,CAACnB,KAAI,GAAI,IAAI,CAACA,KAAK,CAACC,MAAM,CAACG,IAAG,IAAKA,IAAI,CAACa,EAAC,KAAME,MAAM,CAAC;MAC5D,EAAE,OAAOT,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDW,WAAWA,CAACpB,MAAM,EAAE;MAClB,IAAI,CAACA,MAAK,GAAIA,MAAM;IACtB;EACF,CAAC;EACDqB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACf,UAAU,CAAC,CAAC;IACjB;IACAb,KAAK,CAACe,GAAG,CAAC,2CAA2C,EAClDc,IAAI,CAACf,QAAO,IAAK;MAChBG,OAAO,CAACa,GAAG,CAAC,kBAAkB,EAAEhB,QAAQ,CAACT,IAAI,CAAC;IAChD,CAAC,EACA0B,KAAK,CAACf,KAAI,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACN;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}